- :name: zip
  :arglist: |-
    ary.zip(arg, ...)                   -> new_ary
    ary.zip(arg, ...) {| arr | block }  -> nil
  :comment: |-
    Convierte cualquier argumento en arreglos, luego une los elementos de
    +self+ con los elementos correspondientes de cada argumento. Esto
    genera una secuencia de <code>self.size</code> <em>n</em>-elementos
    de arreglos, donde <em>n</em> es uno más que el número de argumentos. Si
    el tamaño de cualquier argumento es menos que <code>enumObj.size</code>,
    el valor <code>nil</code> es suministrado. Si un bloque es dado, es
    invocado para cada salida de arreglo, sino un arreglo de arreglos es
    devuelto.
   
       a = [ 4, 5, 6 ]
       b = [ 7, 8, 9 ]
       [1,2,3].zip(a, b)      #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
       [1,2].zip(a,b)         #=> [[1, 4, 7], [2, 5, 8]]
       a.zip([1,2],[8])       #=> [[4,1,8], [5,2,nil], [6,nil,nil]]
- :name: transpose
  :arglist: ary.transpose -> new_ary
  :comment: |-
    Asume que +self+ es un arreglo de arreglos y transpone las
    filas y columnas.
    
       a = [[1,2], [3,4], [5,6]]
       a.transpose   #=> [[1, 3, 5], [2, 4, 6]]
- :name: replace
  :arglist: ary.replace(other_ary)  -> ary
  :comment: |-
    Reemplaza el contenido de +self+ con el contenido de
    <i>other_ary</i>, truncando o expandiendo si es necesario.
    
       a = [ "a", "b", "c", "d", "e" ]
       a.replace([ "x", "y", "z" ])   #=> ["x", "y", "z"]
       a                              #=> ["x", "y", "z"]
- :name: clear
  :arglist: ary.clear    -> ary
  :comment: |-
    Quita todos los elementos de +self+.
    
       a = [ "a", "b", "c", "d", "e" ]
       a.clear    #=> [ ]
- :name: fill
  :arglist: |-
    ary.fill(obj)                                -> ary
    ary.fill(obj, start [, length])              -> ary
    ary.fill(obj, range )                        -> ary
    ary.fill {|index| block }                    -> ary
    ary.fill(start [, length] ) {|index| block } -> ary
    ary.fill(range) {|index| block }             -> ary
  :comment: |-
    Las primeras tres formas asignan los elementos seleccionados de +self+ (la cual
    puede ser el arreglo entero) a <i>obj</i>. Un <i>start</i> de
    <code>nil</code> es equivalente a cero. Un <i>length</i> de
    <code>nil</code> es equivalente a <i>self.length</i>. Las últimas tres
    formas llenan el arreglo con el valor del bloque. El bloque
    recibe el índice absoluto de cada elemento a ser llenado.
    Los valores negativos de <i>start</i> cuenta desde el final del arreglo.
    
       a = [ "a", "b", "c", "d" ]
       a.fill("x")              #=> ["x", "x", "x", "x"]
       a.fill("z", 2, 2)        #=> ["x", "x", "z", "z"]
       a.fill("y", 0..1)        #=> ["y", "y", "z", "z"]
       a.fill {|i| i*i}         #=> [0, 1, 4, 9]
       a.fill(-2) {|i| i*i*i}   #=> [0, 1, 8, 27]
- :name: include?
  :arglist: ary.include?(obj)   -> true or false
  :comment: |-
    Devuelve <code>true</code> si el objeto dado está presente en
    +self+ (es decir, si cualquier objeto <code>==</code> <i>anObject</i>),
    si no <code>false</code>.
    
       a = [ "a", "b", "c" ]
       a.include?("b")   #=> true
       a.include?("z")   #=> false
- :name: <=>
  :arglist: ary <=> other_ary   ->  -1, 0, +1 or nil
  :comment: |-
    Comparación---Regresa un entero (-1, 0,
    o +1) si este arreglo es menor que, igual que, o mayor que 
    <i>other_ary</i>. Cada objeto en cada arreglo es comparado
    (usando <=>). Si cualquier valor no es
    igual, entonces una desigualdad es el valor devuelto. Si todos los
    valores encontrados son iguales, entonces el valor devuelto está basado sobre una
    comparación de la longitud de los arreglos. Por lo tanto, dos arreglos son
    ``iguales'' de acuerdo a <code>Array#<=></code> si y sólo si ellos tienen
    la misma longitud y el valor de cada elemento es igual al
    valor del elemento correspondiente en el otro arreglo.
    
       [ "a", "a", "c" ]    <=> [ "a", "b", "c" ]   #=> -1
       [ 1, 2, 3, 4, 5, 6 ] <=> [ 1, 2 ]            #=> +1
- :name: slice
  :arglist: |-
    ary[index]                -> obj     or nil
    ary[start, length]        -> new_ary or nil
    ary[range]                -> new_ary or nil
    ary.slice(index)          -> obj     or nil
    ary.slice(start, length)  -> new_ary or nil
    ary.slice(range)          -> new_ary or nil
  :comment: |-
    Refencia de Elemento---Devuelve el elemento en _index_,
    o devuelve un subarreglo empezando en _start_ y
    continuando por _length_ elementos, o devuelve un subarreglo
    espeficado por _range_.
    Los índices negativos cuentan en retroceso desde el final del
    arreglo (-1 es el último elemento). Devuelve +nil+ si el índice
    (o índice inicial) esta fuera de rango.
    
       a = [ "a", "b", "c", "d", "e" ]
       a[2] +  a[0] + a[1]    #=> "cab"
       a[6]                   #=> nil
       a[1, 2]                #=> [ "b", "c" ]
       a[1..3]                #=> [ "b", "c", "d" ]
       a[4..7]                #=> [ "e" ]
       a[6..10]               #=> nil
       a[-3, 3]               #=> [ "c", "d", "e" ]
       # special cases
       a[5]                   #=> nil
       a[5, 1]                #=> []
       a[5..10]               #=> []
- :name: slice!
  :arglist: |-
    ary.slice!(index)         -> obj or nil
    ary.slice!(start, length) -> new_ary or nil
    ary.slice!(range)         -> new_ary or nil
  :comment: |-
    Borra el elemento(s) dado por un índice (opcionalmente con una longitud)
    o por un rango. Devuelve el objeto borrado (u objetos), o
    <code>nil</code> si el índice esta fuera de rango.
    
       a = [ "a", "b", "c" ]
       a.slice!(1)     #=> "b"
       a               #=> ["a", "c"]
       a.slice!(-1)    #=> "c"
       a               #=> ["a"]
       a.slice!(100)   #=> nil
       a               #=> ["a"]
- :name: assoc
  :arglist: ary.assoc(obj)   -> new_ary  or  nil
  :comment: |-
    Busca a través de un arreglo donde sus elementos son también arreglos
    comparando _obj_ con el primer elemento de cada arreglo contenido
    usando obj.==.
    Devuelve el primer arreglo contenido donde empareje ( es decir,
    el primer arreglo asociado),
    o +nil+ si no encuentra su igual.
    Véase también <code>Array#rassoc</code>.
    
       s1 = [ "colors", "red", "blue", "green" ]
       s2 = [ "letters", "a", "b", "c" ]
       s3 = "foo"
       a  = [ s1, s2, s3 ]
       a.assoc("letters")  #=> [ "letters", "a", "b", "c" ]
       a.assoc("foo")      #=> nil
- :name: rassoc
  :arglist: ary.rassoc(obj) -> new_ary or nil
  :comment: |-
    Busca a través del arreglo donde sus elementos son también arreglos. Compara
    _obj_ con el segundo elemento de cada arreglo contenido usando
    <code>==</code>. Devuelve el primer arreglo contenido que empareje. Véase
    también <code>Array#assoc</code>.
    
       a = [ [ 1, "one"], [2, "two"], [3, "three"], ["ii", "two"] ]
       a.rassoc("two")    #=> [2, "two"]
       a.rassoc("four")   #=> nil
- :name: +
  :arglist: ary + other_ary   -> new_ary
  :comment: |-
    Concadenación---Devuelve un nuevo arreglo construido al concadenar los
    dos arreglos juntos para producir un tercer arreglo.
    
       [ 1, 2, 3 ] + [ 4, 5 ]    #=> [ 1, 2, 3, 4, 5 ]
- :name: "*"
  :arglist: |-
    ary * int     -> new_ary
    ary * str     -> new_string
  :comment: |-
    Repetition---With a String argument, equivalent to
    self.join(str). Otherwise, returns a new array
    built by concatenating the _int_ copies of +self+.
    
       [ 1, 2, 3 ] * 3    #=> [ 1, 2, 3, 1, 2, 3, 1, 2, 3 ]
       [ 1, 2, 3 ] * ","  #=> "1,2,3"
- :name: "-"
  :arglist: ary - other_ary    -> new_ary
  :comment: |-
    Array Difference---Returns a new array that is a copy of
    the original array, removing any items that also appear in
    <i>other_ary</i>. (If you need set-like behavior, see the
    library class Set.)
    
       [ 1, 1, 2, 2, 3, 3, 4, 5 ] - [ 1, 2, 4 ]  #=>  [ 3, 3, 5 ]
- :name: "&"
  :arglist: ary & other_ary      -> new_ary
  :comment: |-
    Set Intersection---Returns a new array
    containing elements common to the two arrays, with no duplicates.
    
       [ 1, 1, 3, 5 ] & [ 1, 2, 3 ]   #=> [ 1, 3 ]
- :name: "|"
  :arglist: ary | other_ary     -> new_ary
  :comment: |-
    Set Union---Returns a new array by joining this array with
    <i>other_ary</i>, removing duplicates.
    
       [ "a", "b", "c" ] | [ "c", "d", "a" ]
              #=> [ "a", "b", "c", "d" ]
- :name: uniq
  :arglist: ary.uniq   -> new_ary
  :comment: |-
    Returns a new array by removing duplicate values in +self+.
    
       a = [ "a", "a", "b", "b", "c" ]
       a.uniq   #=> ["a", "b", "c"]
       c = [ "a:def", "a:xyz", "b:abc", "b:xyz", "c:jkl" ]
       c.uniq {|s| s[/^\w+/]}  #=> [ "a:def", "b:abc", "c:jkl" ]
- :name: uniq!
  :arglist: ary.uniq! -> ary or nil
  :comment: |-
    Removes duplicate elements from +self+.
    Returns <code>nil</code> if no changes are made (that is, no
    duplicates are found).
    
       a = [ "a", "a", "b", "b", "c" ]
       a.uniq!   #=> ["a", "b", "c"]
       b = [ "a", "b", "c" ]
       b.uniq!   #=> nil
       c = [ "a:def", "a:xyz", "b:abc", "b:xyz", "c:jkl" ]
       c.uniq! {|s| s[/^\w+/]}  #=> [ "a:def", "b:abc", "c:jkl" ]
- :name: compact
  :arglist: ary.compact     -> new_ary
  :comment: |-
    Returns a copy of +self+ with all +nil+ elements removed.
    
       [ "a", nil, "b", nil, "c", nil ].compact
                         #=> [ "a", "b", "c" ]
- :name: compact!
  :arglist: ary.compact!    -> ary  or  nil
  :comment: |-
    Removes +nil+ elements from the array.
    Returns +nil+ if no changes were made, otherwise returns
    <i>ary</i>.
    
       [ "a", nil, "b", nil, "c" ].compact! #=> [ "a", "b", "c" ]
       [ "a", "b", "c" ].compact!           #=> nil
- :name: flatten
  :arglist: |-
    ary.flatten -> new_ary
    ary.flatten(level) -> new_ary
  :comment: |-
    Returns a new array that is a one-dimensional flattening of this
    array (recursively). That is, for every element that is an array,
    extract its elements into the new array.  If the optional
    <i>level</i> argument determines the level of recursion to flatten.
    
       s = [ 1, 2, 3 ]           #=> [1, 2, 3]
       t = [ 4, 5, 6, [7, 8] ]   #=> [4, 5, 6, [7, 8]]
       a = [ s, t, 9, 10 ]       #=> [[1, 2, 3], [4, 5, 6, [7, 8]], 9, 10]
       a.flatten                 #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
       a = [ 1, 2, [3, [4, 5] ] ]
       a.flatten(1)              #=> [1, 2, 3, [4, 5]]
- :name: flatten!
  :arglist: |-
    ary.flatten!        -> ary or nil
    ary.flatten!(level) -> array or nil
  :comment: |-
    Flattens +self+ in place.
    Returns <code>nil</code> if no modifications were made (i.e.,
    <i>ary</i> contains no subarrays.)  If the optional <i>level</i>
    argument determines the level of recursion to flatten.
    
       a = [ 1, 2, [3, [4, 5] ] ]
       a.flatten!   #=> [1, 2, 3, 4, 5]
       a.flatten!   #=> nil
       a            #=> [1, 2, 3, 4, 5]
       a = [ 1, 2, [3, [4, 5] ] ]
       a.flatten!(1) #=> [1, 2, 3, [4, 5]]
- :name: count
  :arglist: |-
    ary.count      -> int
    ary.count(obj) -> int
    ary.count { |item| block }  -> int
  :comment: |-
    Returns the number of elements.  If an argument is given, counts
    the number of elements which equals to <i>obj</i>.  If a block is
    given, counts the number of elements yielding a true value.
    
       ary = [1, 2, 4, 2]
       ary.count             #=> 4
       ary.count(2)          #=> 2
       ary.count{|x|x%2==0}  #=> 3
- :name: shuffle!
  :arglist: |-
    ary.shuffle!              -> ary
    ary.shuffle!(random: rng) -> ary
  :comment: |-
    Shuffles elements in +self+ in place.
    If +rng+ is given, it will be used as the random number generator.
- :name: shuffle
  :arglist: |-
    ary.shuffle              -> new_ary
    ary.shuffle(random: rng) -> new_ary
  :comment: |-
    Returns a new array with elements of this array shuffled.
    
       a = [ 1, 2, 3 ]           #=> [1, 2, 3]
       a.shuffle                 #=> [2, 3, 1]
    
    If +rng+ is given, it will be used as the random number generator.
    
       a.shuffle(random: Random.new(1))  #=> [1, 3, 2]
- :name: sample
  :arglist: |-
    ary.sample                  -> obj
    ary.sample(random: rng)     -> obj
    ary.sample(n)               -> new_ary
    ary.sample(n, random: rng)  -> new_ary
  :comment: |-
    Choose a random element or +n+ random elements from the array. The elements
    are chosen by using random and unique indices into the array in order to
    ensure that an element doesn't repeat itself unless the array already
    contained duplicate elements. If the array is empty the first form returns
    <code>nil</code> and the second form returns an empty array.
    
    If +rng+ is given, it will be used as the random number generator.
- :name: cycle
  :arglist: |-
    ary.cycle(n=nil) {|obj| block }  -> nil
    ary.cycle(n=nil)                 -> an_enumerator
  :comment: |-
    Calls <i>block</i> for each element repeatedly _n_ times or
    forever if none or +nil+ is given.  If a non-positive number is
    given or the array is empty, does nothing.  Returns +nil+ if the
    loop has finished without getting interrupted.
    
    If no block is given, an enumerator is returned instead.
    
       a = ["a", "b", "c"]
       a.cycle {|x| puts x }  # print, a, b, c, a, b, c,.. forever.
       a.cycle(2) {|x| puts x }  # print, a, b, c, a, b, c.
- :name: permutation
  :arglist: |-
    ary.permutation { |p| block }          -> ary
    ary.permutation                        -> an_enumerator
    ary.permutation(n) { |p| block }       -> ary
    ary.permutation(n)                     -> an_enumerator
  :comment: |-
    When invoked with a block, yield all permutations of length <i>n</i>
    of the elements of <i>ary</i>, then return the array itself.
    If <i>n</i> is not specified, yield all permutations of all elements.
    The implementation makes no guarantees about the order in which
    the permutations are yielded.
    
    If no block is given, an enumerator is returned instead.
    
    Examples:
    
        a = [1, 2, 3]
        a.permutation.to_a     #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
        a.permutation(1).to_a  #=> [[1],[2],[3]]
        a.permutation(2).to_a  #=> [[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]
        a.permutation(3).to_a  #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
        a.permutation(0).to_a  #=> [[]] # one permutation of length 0
        a.permutation(4).to_a  #=> []   # no permutations of length 4
- :name: combination
  :arglist: |-
    ary.combination(n) { |c| block }    -> ary
    ary.combination(n)                  -> an_enumerator
  :comment: |-
    When invoked with a block, yields all combinations of length <i>n</i>
    of elements from <i>ary</i> and then returns <i>ary</i> itself.
    The implementation makes no guarantees about the order in which
    the combinations are yielded.
    
    If no block is given, an enumerator is returned instead.
    
    Examples:
    
        a = [1, 2, 3, 4]
        a.combination(1).to_a  #=> [[1],[2],[3],[4]]
        a.combination(2).to_a  #=> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
        a.combination(3).to_a  #=> [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]
        a.combination(4).to_a  #=> [[1,2,3,4]]
        a.combination(0).to_a  #=> [[]] # one combination of length 0
        a.combination(5).to_a  #=> []   # no combinations of length 5
- :name: repeated_permutation
  :arglist: |-
    ary.repeated_permutation(n) { |p| block } -> ary
    ary.repeated_permutation(n)               -> an_enumerator
  :comment: |-
    When invoked with a block, yield all repeated permutations of length
    <i>n</i> of the elements of <i>ary</i>, then return the array itself.
    The implementation makes no guarantees about the order in which
    the repeated permutations are yielded.
    
    If no block is given, an enumerator is returned instead.
    
    Examples:
    
        a = [1, 2]
        a.repeated_permutation(1).to_a  #=> [[1], [2]]
        a.repeated_permutation(2).to_a  #=> [[1,1],[1,2],[2,1],[2,2]]
        a.repeated_permutation(3).to_a  #=> [[1,1,1],[1,1,2],[1,2,1],[1,2,2],
                                        #    [2,1,1],[2,1,2],[2,2,1],[2,2,2]]
        a.repeated_permutation(0).to_a  #=> [[]] # one permutation of length 0
- :name: repeated_combination
  :arglist: |-
    ary.repeated_combination(n) { |c| block } -> ary
    ary.repeated_combination(n)               -> an_enumerator
  :comment: |-
    When invoked with a block, yields all repeated combinations of
    length <i>n</i> of elements from <i>ary</i> and then returns
    <i>ary</i> itself.
    The implementation makes no guarantees about the order in which
    the repeated combinations are yielded.
    
    If no block is given, an enumerator is returned instead.
    
    Examples:
    
        a = [1, 2, 3]
        a.repeated_combination(1).to_a  #=> [[1], [2], [3]]
        a.repeated_combination(2).to_a  #=> [[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]]
        a.repeated_combination(3).to_a  #=> [[1,1,1],[1,1,2],[1,1,3],[1,2,2],[1,2,3],
                                        #    [1,3,3],[2,2,2],[2,2,3],[2,3,3],[3,3,3]]
        a.repeated_combination(4).to_a  #=> [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,2,2],[1,1,2,3],
                                        #    [1,1,3,3],[1,2,2,2],[1,2,2,3],[1,2,3,3],[1,3,3,3],
                                        #    [2,2,2,2],[2,2,2,3],[2,2,3,3],[2,3,3,3],[3,3,3,3]]
        a.repeated_combination(0).to_a  #=> [[]] # one combination of length 0
- :name: product
  :arglist: |-
    ary.product(other_ary, ...)                -> new_ary
    ary.product(other_ary, ...) { |p| block }  -> ary
  :comment: |-
    Returns an array of all combinations of elements from all arrays,
    The length of the returned array is the product of the length
    of +self+ and the argument arrays.
    If given a block, <i>product</i> will yield all combinations
    and return +self+ instead.
    
       [1,2,3].product([4,5])     #=> [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]
       [1,2].product([1,2])       #=> [[1,1],[1,2],[2,1],[2,2]]
       [1,2].product([3,4],[5,6]) #=> [[1,3,5],[1,3,6],[1,4,5],[1,4,6],
                                  #     [2,3,5],[2,3,6],[2,4,5],[2,4,6]]
       [1,2].product()            #=> [[1],[2]]
       [1,2].product([])          #=> []
- :name: take
  :arglist: ary.take(n)               -> new_ary
  :comment: |-
    Returns first n elements from <i>ary</i>.
    
       a = [1, 2, 3, 4, 5, 0]
       a.take(3)             #=> [1, 2, 3]
- :name: take_while
  :arglist: |-
    ary.take_while {|arr| block }   -> new_ary
    ary.take_while                  -> an_enumerator
  :comment: |-
    Passes elements to the block until the block returns +nil+ or +false+,
    then stops iterating and returns an array of all prior elements.
    
    If no block is given, an enumerator is returned instead.
    
       a = [1, 2, 3, 4, 5, 0]
       a.take_while {|i| i < 3 }   #=> [1, 2]
- :name: drop
  :arglist: ary.drop(n)               -> new_ary
  :comment: |-
    Drops first n elements from +ary+ and returns the rest of
    the elements in an array.
    
       a = [1, 2, 3, 4, 5, 0]
       a.drop(3)             #=> [4, 5, 0]
- :name: drop_while
  :arglist: |-
    ary.drop_while {|arr| block }   -> new_ary
    ary.drop_while                  -> an_enumerator
  :comment: |-
    Drops elements up to, but not including, the first element for
    which the block returns +nil+ or +false+ and returns an array
    containing the remaining elements.
    
    If no block is given, an enumerator is returned instead.
    
       a = [1, 2, 3, 4, 5, 0]
       a.drop_while {|i| i < 3 }   #=> [3, 4, 5, 0]
- :name: to_s
  :arglist: to_s()
  :comment: ""
- :name: size
  :arglist: size()
  :comment: ""
- :name: pack
  :arglist: arr.pack ( aTemplateString ) -> aBinaryString
  :comment: |-
    Empaqueta el contendio de <i>arr</i> en una secuencia binaria de acuerdo a
    los directorios en <i>aTemplateString</i> (vea la tabla debajo)
    Directorios ``A,'' ``a,'' y ``Z'' pueden ser seguidos por una cuenta,
    la cual da el ancho del campo resultante. Los directorios restante
    también pueden tomar una cuenta, indicando el número de elementos 
    arreglo a convertir. Si la cuenta es un asterisco
    (``<code>*</code>''), todos los elementos arreglo restante serán
    convertidos. Cualquier directorio  ``<code>sSiIlL</code>'' pueden ser
    seguidos de un underscore (``<code>_</code>'') o
    un signo de exclamación (``<code>!</code>'') para usar 

    Packs the contents of <i>arr</i> into a binary sequence according to
    the directives in <i>aTemplateString</i> (see the table below)
    Directives ``A,'' ``a,'' and ``Z'' may be followed by a count,
    which gives the width of the resulting field. The remaining
    directives also may take a count, indicating the number of array
    elements to convert. If the count is an asterisk
    (``<code>*</code>''), all remaining array elements will be
    converted. Any of the directives ``<code>sSiIlL</code>'' may be
    followed by an underscore (``<code>_</code>'') or
    exclamation mark (``<code>!</code>'') to use the underlying
    platform's native size for the specified type; otherwise, they use a
    platform-independent size. Spaces are ignored in the template
    string. See also <code>String#unpack</code>.
    
       a = [ "a", "b", "c" ]
       n = [ 65, 66, 67 ]
       a.pack("A3A3A3")   #=> "a  b  c  "
       a.pack("a3a3a3")   #=> "a\000\000b\000\000c\000\000"
       n.pack("ccc")      #=> "ABC"
    
    Directives for +pack+.
    
     Integer      | Array   |
     Directive    | Element | Meaning
     ---------------------------------------------------------------------------
        C         | Entero  | 8-bit unsigned (unsigned char)
        S         | Entero  | 16-bit unsigned, native endian (uint16_t)
        L         | Entero  | 32-bit unsigned, native endian (uint32_t)
        Q         | Entero  | 64-bit unsigned, native endian (uint64_t)
                  |         |
        c         | Entero  | 8-bit signed (signed char)
        s         | Entero  | 16-bit signed, native endian (int16_t)
        l         | Entero  | 32-bit signed, native endian (int32_t)
        q         | Entero  | 64-bit signed, native endian (int64_t)
                  |         |
        S_, S!    | Entero  | unsigned short, native endian
        I, I_, I! | Entero  | unsigned int, native endian
        L_, L!    | Entero  | unsigned long, native endian
                  |         |
        s_, s!    | Entero  | signed short, native endian
        i, i_, i! | Entero  | signed int, native endian
        l_, l!    | Entero  | signed long, native endian
                  |         |
        S> L> Q>  | Entero  | same as the directives without ">" except
        s> l> q>  |         | big endian
        S!> I!>   |         | (available since Ruby 1.9.3)
        L!>       |         | "S>" is same as "n"
        s!> i!>   |         | "L>" is same as "N"
        l!>       |         |
                  |         |
        S< L< Q<  | Entero  | same as the directives without "<" except
        s< l< q<  |         | little endian
        S!< I!<   |         | (available since Ruby 1.9.3)
        L!<       |         | "S<" is same as "v"
        s!< i!<   |         | "L<" is same as "V"
        l!<       |         |
                  |         |
        n         | Entero  | 16-bit unsigned, network (big-endian) byte order
        N         | Entero  | 32-bit unsigned, network (big-endian) byte order
        v         | Entero  | 16-bit unsigned, VAX (little-endian) byte order
        V         | Entero  | 32-bit unsigned, VAX (little-endian) byte order
                  |         |
        U         | Entero  | UTF-8 character
        w         | Entero  | BER-compressed integer
    
     Float        |         |
     Directive    |         | Meaning
     ---------------------------------------------------------------------------
        D, d      | Flotante| double-precision, native format
        F, f      | Flotante| single-precision, native format
        E         | Flotante| double-precision, little-endian byte order
        e         | Flotante| single-precision, little-endian byte order
        G         | Flotante| double-precision, network (big-endian) byte order
        g         | Flotante| single-precision, network (big-endian) byte order
    
     String       |         |
     Directive    |         | Meaning
     ---------------------------------------------------------------------------
        A         | Cadena  | arbitrary binary string (space padded, count is width)
        a         | Cadena  | arbitrary binary string (null padded, count is width)
        Z         | Cadena  | same as ``a'', except that null is added with *
        B         | Cadena  | bit string (MSB first)
        b         | Cadena  | bit string (LSB first)
        H         | Cadena  | hex string (high nibble first)
        h         | Cadena  | hex string (low nibble first)
        u         | Cadena  | UU-encoded string
        M         | Cadena  | quoted printable, MIME encoding (see RFC2045)
        m         | Cadena  | base64 encoded string (see RFC 2045, count is width)
                  |         | (if count is 0, no line feed are added, see RFC 4648)
        P         | Cadena  | pointer to a structure (fixed-length string)
        p         | Cadena  | pointer to a null-terminated string
    
     Misc.        |         |
     Directive    |         | Meaning
     ---------------------------------------------------------------------------
        @         | ---     | moves to absolute position
        X         | ---     | back up a byte
        x         | ---     | null byte
:class_methods: 
- :name: "[]"
  :arglist: "[](*args)"
  :comment: |-
    Devuelve un nuevo arreglo poblado con los objetos dados.
    
      Array.[]( 1, 'a', /^A/ )
      Array[ 1, 'a', /^A/ ]
      [ 1, 'a', /^A/ ]
- :name: try_convert
  :arglist: Array.try_convert(obj) -> array or nil
  :comment: |-
    Intenta convertir <i>obj</i> en un arreglo, usando el método +to_ary+.
    Devuelve arreglos convertidos o +nil+ si <i>obj</i> no puede ser convertido
    por alguna razón. Éste método puede ser usado para revisar si un argumento es un
    arreglo.
    
       Array.try_convert([1])   #=> [1]
       Array.try_convert("1")   #=> nil
    
       if tmp = Array.try_convert(arg)
         # el argumento es un arreglo
       elsif tmp = String.try_convert(arg)
         # el argumento es una cadena
       end
- :name: new
  :arglist: |-
    Array.new(size=0, obj=nil)
    Array.new(array)
    Array.new(size) {|index| block }
  :comment: |-
    Regresa un nuevo arreglo. En la primera forma, el nuevo arreglo esta
    vacío. En la segunda es creada con las copias _size_ de _obj_
    (es decir, _size_ se referencia al mismo
    _obj_). La tercera forma crea una copia del arreglo
    pasado como un parámetro (el arreglo es generado al llamar
    to_ary en el parámetro). En la última forma, un arreglo
    del tamaño dado es creado. Cada elemento en este arreglo es
    calculado pasando el índice del elemento al bloque dado
    y almacenando el valor devuelto.
    
       Array.new
       Array.new(2)
       Array.new(5, "A")
    
       # solo una copia del objeto es creado
       a = Array.new(2, Hash.new)
       a[0]['cat'] = 'feline'
       a
       a[1]['cat'] = 'Felix'
       a
    
       # aquí múltiples copias son creados
       a = Array.new(2) { Hash.new }
       a[0]['cat'] = 'feline'
       a
    
       squares = Array.new(5) {|i| i*i}
       squares
    
       copy = Array.new(squares)
